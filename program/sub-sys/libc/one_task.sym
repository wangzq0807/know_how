
one_task：     文件格式 elf32-i386


Disassembly of section .text:

08048074 <_start>:
#include "sys/syscall.h"
extern int main();
int _start() {
 8048074:	55                   	push   %ebp
 8048075:	89 e5                	mov    %esp,%ebp
 8048077:	83 ec 08             	sub    $0x8,%esp
    return main();
 804807a:	e8 02 00 00 00       	call   8048081 <main>
}
 804807f:	c9                   	leave  
 8048080:	c3                   	ret    

08048081 <main>:

int main() {
 8048081:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8048085:	83 e4 f0             	and    $0xfffffff0,%esp
 8048088:	ff 71 fc             	pushl  -0x4(%ecx)
 804808b:	55                   	push   %ebp
 804808c:	89 e5                	mov    %esp,%ebp
 804808e:	51                   	push   %ecx
 804808f:	83 ec 14             	sub    $0x14,%esp
    while (1) {
        open("/2M", 123, 456);
 8048092:	83 ec 04             	sub    $0x4,%esp
 8048095:	68 c8 01 00 00       	push   $0x1c8
 804809a:	6a 7b                	push   $0x7b
 804809c:	68 d9 80 04 08       	push   $0x80480d9
 80480a1:	e8 1a 00 00 00       	call   80480c0 <open>
 80480a6:	83 c4 10             	add    $0x10,%esp
        // 延时
        int cnt = 100000;
 80480a9:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
        while(cnt--);
 80480b0:	90                   	nop
 80480b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80480b4:	8d 50 ff             	lea    -0x1(%eax),%edx
 80480b7:	89 55 f4             	mov    %edx,-0xc(%ebp)
 80480ba:	85 c0                	test   %eax,%eax
 80480bc:	75 f3                	jne    80480b1 <main+0x30>
    }
 80480be:	eb d2                	jmp    8048092 <main+0x11>

080480c0 <open>:
    ret;                    \
})

int
open (const char *path, int flags, int mode)
{
 80480c0:	55                   	push   %ebp
 80480c1:	89 e5                	mov    %esp,%ebp
 80480c3:	53                   	push   %ebx
    return SYSCALL(1, 3);
 80480c4:	b8 01 00 00 00       	mov    $0x1,%eax
 80480c9:	ba 03 00 00 00       	mov    $0x3,%edx
 80480ce:	52                   	push   %edx
 80480cf:	cd 80                	int    $0x80
 80480d1:	5a                   	pop    %edx
 80480d2:	89 c3                	mov    %eax,%ebx
 80480d4:	89 d8                	mov    %ebx,%eax
}
 80480d6:	5b                   	pop    %ebx
 80480d7:	5d                   	pop    %ebp
 80480d8:	c3                   	ret    
